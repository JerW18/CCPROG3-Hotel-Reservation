package controller;

import model.HotelSystem;
import model.Reservation;
import model.Room;
import view.HotelSystemGUI;
import view.RemoveReservationPage2;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 * Controller for managing the second step in the reservation removal process.
 * Handles the display and removal of reservations from a selected room.
 */
public class RemoveReservationController2 extends Controller implements ActionListener {
    private RemoveReservationPage2 page;

    /**
     * Constructs a RemoveReservationController2 with the given page.
     *
     * @param page The RemoveReservationPage2 associated with this controller.
     */
    public RemoveReservationController2(RemoveReservationPage2 page) {
        this.page = page;

        page.setController(this);
        page.setActionListener(this);
    }

    /**
     * Updates the view with the current reservations for the selected room.
     * Retrieves reservations from the HotelSystem and updates the page with the list.
     */
    @Override
    public void updateView() {
        page.clearText();

        ArrayList<Reservation> reservations = HotelSystem.getCurrentRoom().getReservations();
        DefaultListModel<String> reservationNames = new DefaultListModel<>();
        for (int i = 0; i < reservations.size(); i++) {
            Reservation reservation = reservations.get(i);
            reservationNames.addElement(i + " - " + reservation.getGuestName() + "'s reservation | " +
                    reservation.getCheckInDate() + " - " + reservation.getCheckOutDate());
        }
        if (reservationNames.isEmpty()) { // should never happen i.e. caught by previous controller
            reservationNames.addElement("No reservations found");
        }

        page.updateReservations(reservationNames);
    }

    /**
     * Handles actions performed on the RemoveReservationPage2.
     * - If the action command is "Back", navigates back to the first step in the reservation removal process.
     * - If the action command is "Enter", attempts to remove the selected reservation from the room.
     *
     * @param e The ActionEvent generated by the user's action.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("Back")) {
            HotelSystemGUI.getInstance().changeLayout("remove reservation 1");
        } else {
            try {
                int index = Integer.parseInt(page.getText());
                boolean valid = HotelSystem.getCurrentRoom().checkReservationIndex(index);
                if (!valid)
                    throw new Exception();

                int response = JOptionPane.showConfirmDialog(null,
                        "Confirm action? (cannot be undone)",
                        "Confirm Action",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE);
                if (response == JOptionPane.YES_OPTION) {
                    HotelSystem.getCurrentRoom().removeReservation(index);
                    JOptionPane.showMessageDialog(null, "Room successfully removed!");
                    HotelSystemGUI.getInstance().changeLayout("manage hotel");
                }
            } catch (Exception exception) {
                JOptionPane.showMessageDialog(null, "Invalid input!");
            }
        }
    }
}
